{"version":3,"sources":["components/P.tsx","utils/constants.ts","utils/underlinedLink.ts","components/A.tsx","components/BtnClipboard.tsx","components/App.tsx","index.tsx"],"names":["P","children","EMAIL","COLORS","underlinedLink","css","A","href","BtnClipboard","feedback","clipboardText","type","className","data-clipboard-text","App","ClipboardJS","on","e","btn","trigger","clearSelection","classList","add","setTimeout","remove","this","handleClipboard","white","black","styles","React","ReactDOM","document","getElementById"],"mappings":"mPAaeA,EANY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,yBAAIA,ICDpCC,EAAQ,yBAERC,EACJ,UADIA,EAEJ,O,isBCPF,IAAMC,EAAiBC,YAAH,IA4BHF,GCVTG,EAXY,SAAC,GAAD,IAAGL,EAAH,EAAGA,SAAUM,EAAb,EAAaA,KAAb,OACzB,iBAAGF,IAAKD,EAAgBG,KAAMA,GAC3BN,I,mYCCL,IA8BeO,EA9BuB,SAAC,GAAD,IAAGP,EAAH,EAAGA,SAAUQ,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,cAAvB,OACpC,sBAAQC,KAAK,SAASN,IAAKD,EAAgBQ,UAAU,eAAeC,sBAAqBH,GACvF,oBACEL,IAAKA,YAAF,IHZsB,cG2BxBI,GAEFR,I,onCCtBgBa,E,gLAEC,IAAIC,IJRE,iBIUdC,GAAG,WAAW,SAACC,GAAO,IACbC,EAAwBD,EAAjCE,QAAcC,EAAmBH,EAAnBG,eAEtBF,EAAIG,UAAUC,IJdW,aIezBC,YAAW,kBAAML,EAAIG,UAAUG,OJfN,eIe+B,KACxDJ,S,0CAKFK,KAAKC,oB,+BAGoB,IACjBC,EAAiBxB,EAAVyB,EAAUzB,EAEzB,OACE,oBACEE,IAAKA,YAAF,MAQH,YAAC,IAAD,CACEwB,OAAQxB,YAAF,IAekBuB,EACXD,KAQf,uBACEtB,IAAKA,YAAF,MAIH,kBACEA,IAAKA,YAAF,MADL,SAWA,YAAC,EAAD,qDAC+C,YAAC,EAAD,CAAGE,KAAK,2BAAR,qBAD/C,KAIA,YAAC,EAAD,mEACkE,YAAC,EAAD,CAAGA,KAAK,wBAAR,UADlE,MAC+G,IAC7G,YAAC,EAAD,CAAGA,KAAK,8BAAR,cAFF,uBAE0E,IACxE,YAAC,EAAD,CAAGA,KAAK,+BAAR,eAHF,qBAG0E,IACxE,YAAC,EAAD,CAAGA,KAAK,6BAAR,aAJF,KAOA,YAAC,EAAD,uHAKA,YAAC,EAAD,kEAC4D,YAAC,EAAD,CAAGA,KAAI,iBAAYL,IAAnB,YAD5D,WAC6G,IAC3G,YAAC,EAAD,CAAGK,KAAK,uDAAR,oBAFF,SAE2F,IACzF,YAAC,EAAD,CAAcE,SAAS,iBAAiBC,cAAeR,GAAvD,4BAHF,W,GAvFuB4B,aCLjCC,SAAgB,gBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a64942e9.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport * as React from 'react'\n\ninterface Props {\n  children: React.ReactNode\n}\n\nconst P: React.FC<Props> = ({ children }) => <p>{children}</p>\n\nP.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default P\n","interface TColors {\n  white: string\n  black: string\n}\nexport const IS_COPIED_CLASS = 'is-copied'\nexport const CLIPBOARD_ID = '.js-clipboard'\nexport const EMAIL = 'laurentchean@gmail.com'\n\nexport const COLORS: TColors = {\n  white: '#fefefe',\n  black: '#111',\n}\n","import { css } from '@emotion/react'\nimport { COLORS } from './constants'\n\nexport const underlinedLink = css`\n  position: relative;\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  text-decoration: none;\n  font-family: 'Spectral', serif;\n  font-style: italic;\n  outline: none;\n  border: 0;\n  cursor: pointer;\n  background-color: transparent;\n\n  &:focus,\n  &:hover {\n    &::after {\n      transform: scaleX(0);\n      transform-origin: bottom right;\n    }\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    right: 0;\n    left: 0;\n    bottom: 0;\n    height: 1px;\n    background-color: ${COLORS.white};\n    transform: scaleX(1);\n    transform-origin: bottom left;\n    transition: transform 0.25s ease-out;\n  }\n`\n","/** @jsx jsx */\nimport * as React from 'react'\nimport PropTypes from 'prop-types'\nimport { jsx } from '@emotion/react'\nimport { underlinedLink } from '../utils/underlinedLink'\ninterface Props {\n  children: React.ReactNode\n  href: string\n}\n\nconst A: React.FC<Props> = ({ children, href }) => (\n  <a css={underlinedLink} href={href}>\n    {children}\n  </a>\n)\n\nA.propTypes = {\n  children: PropTypes.node.isRequired,\n  href: PropTypes.string.isRequired,\n}\n\nexport default A\n","/** @jsx jsx */\nimport * as React from 'react'\nimport { jsx, css } from '@emotion/react'\nimport PropTypes from 'prop-types'\nimport { IS_COPIED_CLASS } from '../utils/constants'\nimport { underlinedLink } from '../utils/underlinedLink'\n\ninterface Props {\n  children: React.ReactNode\n  feedback: string\n  clipboardText: string\n}\n\nconst BtnClipboard: React.FC<Props> = ({ children, feedback, clipboardText }) => (\n  <button type=\"button\" css={underlinedLink} className=\"js-clipboard\" data-clipboard-text={clipboardText}>\n    <span\n      css={css`\n        position: absolute;\n        right: 0;\n        bottom: -2em;\n        left: 0;\n        transform: scaleY(0);\n        transform-origin: bottom left;\n        transition: transform 0.25s ease-out;\n\n        .${IS_COPIED_CLASS} & {\n          transform: scaleY(1);\n          transform-origin: top left;\n        }\n      `}\n    >\n      {feedback}\n    </span>\n    {children}\n  </button>\n)\n\nBtnClipboard.propTypes = {\n  children: PropTypes.node.isRequired,\n  feedback: PropTypes.string.isRequired,\n  clipboardText: PropTypes.string.isRequired,\n}\n\nexport default BtnClipboard\n","/** @jsx jsx */\nimport * as React from 'react'\nimport ClipboardJS from 'clipboard'\nimport { jsx, css, Global } from '@emotion/react'\n\nimport P from './P'\nimport A from './A'\nimport BtnClipboard from './BtnClipboard'\n\nimport { IS_COPIED_CLASS, COLORS, CLIPBOARD_ID, EMAIL } from '../utils/constants'\n\nexport default class App extends React.Component<{}> {\n  handleClipboard(): void {\n    const clipboard = new ClipboardJS(CLIPBOARD_ID)\n\n    clipboard.on('success', (e) => {\n      const { trigger: btn, clearSelection } = e\n\n      btn.classList.add(IS_COPIED_CLASS)\n      setTimeout(() => btn.classList.remove(IS_COPIED_CLASS), 2000)\n      clearSelection()\n    })\n  }\n\n  componentDidMount(): void {\n    this.handleClipboard()\n  }\n\n  render(): React.ReactNode {\n    const { white, black } = COLORS\n\n    return (\n      <main\n        css={css`\n          display: flex;\n          align-items: center;\n          max-width: 700px;\n          margin-right: auto;\n          margin-left: auto;\n        `}\n      >\n        <Global\n          styles={css`\n            html {\n              box-sizing: border-box;\n            }\n\n            *,\n            *:before,\n            *:after {\n              box-sizing: inherit;\n            }\n\n            body {\n              font-family: 'Spectral', serif;\n              font-size: 5vw;\n              line-height: 1.8;\n              background-color: ${black};\n              color: ${white};\n\n              @media (min-width: 420px) {\n                font-size: 1.9em;\n              }\n            }\n          `}\n        />\n        <article\n          css={css`\n            padding: 2.5rem;\n          `}\n        >\n          <h1\n            css={css`\n              margin-top: 0;\n              margin-bottom: 0.75em;\n              font-size: 1em;\n              font-weight: normal;\n            `}\n          >\n            Hey !\n          </h1>\n\n          <P>\n            I am a french front end developer working at <A href=\"https://www.emakina.nl/\">Emakina Amsterdam</A>.\n          </P>\n\n          <P>\n            Since 2012, I&apos;ve been working for digital agencies such as <A href=\"http://marcelww.com/\">Marcel</A> or{' '}\n            <A href=\"https://www.mrm-mccann.fr/\">Mrm McCann</A> and for brands like{' '}\n            <A href=\"https://www.thekooples.com/\">The Kooples</A> and more recently{' '}\n            <A href=\"https://www.mobhotel.com/\">MOB Hotel</A>.\n          </P>\n\n          <P>\n            As a user interface developer, I try to deliver a clean code and be creative without forgetting\n            accessibility.\n          </P>\n\n          <P>\n            I am available for freelance. You can contact me with : a <A href={`mailto:${EMAIL}`}>mail app</A>, via my{' '}\n            <A href=\"https://www.linkedin.com/in/laurent-chean-b045465b/\">Linkedin profile</A> or by{' '}\n            <BtnClipboard feedback=\"Email copied !\" clipboardText={EMAIL}>\n              copying my email address\n            </BtnClipboard>\n            .\n          </P>\n        </article>\n      </main>\n    )\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './components/App'\n\n// import 'normalize.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}